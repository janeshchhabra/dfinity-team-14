diff --git a/Cargo.toml b/Cargo.toml
index 3005272..12702c4 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -18,6 +18,8 @@ rand = "0.3"
 byteorder = "0.5"
 log = "0.4.8"
 env_logger = "0.3.5"
+reqwest = "0.11.4"
+tokio = { version = "1.9.0", features = [ "full" ] }
 
 [dev-dependencies]
 env_logger = "0.3.5"
diff --git a/examples/server.rs b/examples/server.rs
index d0d4abd..4b70a4f 100644
--- a/examples/server.rs
+++ b/examples/server.rs
@@ -4,12 +4,75 @@ extern crate log;
 extern crate tftp_server;
 
 use getopts::Options;
+use reqwest::Url;
 use std::env;
+use std::fs::File;
+use std::io::Write;
 use std::net::SocketAddr;
 use std::path::PathBuf;
 use std::str::FromStr;
 use tftp_server::server::TftpServerBuilder;
 
+fn download_urls(url_list: String, serve_dir: &PathBuf) -> Result<(), String> {
+    let urls_s: Vec<&str> = url_list.split(",").collect();
+
+    for url_s in &urls_s {
+        // Parse the URL
+        let url_r = Url::from_str(url_s)
+            .map_err(|e| format!("Failed to parse url: {:?}/{:?}", url_s, e))?;
+        let segments = url_r.path_segments()
+            .ok_or_else(|| "URL missing file path")?;
+        let segments: Vec<&str> = segments.collect();
+        if segments.len() != 1 {
+            return Err(format!("Invalid file name in URL: {:?}", url_s));
+        }
+        let file_name = segments[0];
+        if file_name.is_empty() {
+            return Err(format!("Missing file name in URL: {:?}", url_s));
+        }
+        println!("URL = {:?}, file_name = {}", url_s, file_name);
+
+        // Download the image
+        let start = std::time::Instant::now();
+        let rt = tokio::runtime::Builder::new_current_thread()
+            .enable_all()
+            .build()
+            .unwrap();
+        let url_rc = url_r.clone();
+        let bytes = rt.block_on(async {
+            let ret = reqwest::Client::new()
+                .get(url_rc)
+                .send()
+                .await;
+            if let Err(e) = ret {
+                return Err(format!("Failed to download image: {:?}/{:?}", url_s, e));
+            }
+
+            ret.unwrap().bytes().await.map_err(
+                |e| format!("Failed to download image: {:?}/{:?}", url_s, e)
+            )
+        })?;
+        println!("Successfully downloaded {:?}: {} bytes in {:?}",
+                 url_s, bytes.len(), start.elapsed());
+
+        // Save the image
+        write_image(serve_dir, file_name, &bytes[..])?;
+    }
+    Ok(())
+}
+
+fn write_image(serve_dir: &PathBuf, file_name: &str, bytes: &[u8]) -> Result<(), String> {
+    let mut file_path = serve_dir.clone();
+    file_path.push(file_name);
+
+    let mut f = File::create(file_path.clone())
+        .map_err(|e| format!("Failed to create file {:?}/{:?}", file_path, e))?;
+    f.write(bytes)
+        .map_err(|e| format!("Failed to write file {:?}/{:?}", file_path, e))?;
+    println!("Saved image: {:?}", file_path);
+    Ok(())
+}
+
 fn main() {
     env_logger::init().unwrap();
 
@@ -24,6 +87,12 @@ fn main() {
         "Sets the directory the server serves files on",
         "PATH",
     );
+    opts.optopt(
+        "u",
+        "urls",
+        "The comma separated list of image URLs to download",
+        "URLS",
+    );
     opts.optflag("h", "help", "Print help menu");
     let matches = opts.parse(&args[1..]).unwrap();
     if matches.opt_present("h") {
@@ -37,6 +106,16 @@ fn main() {
         .map(|p| format!("127.0.0.1:{}", p))
         .map(|addr| SocketAddr::from_str(addr.as_str()).expect("Error parsing address"));
     let dir = matches.opt_str("d").map(|s| PathBuf::from(s));
+
+    // Parse/download the URLs into the specified folder
+    let image_urls = matches
+        .opt_str("u")
+        .unwrap();
+
+    if let Some(path) = &dir {
+        download_urls(image_urls, path).expect("Failed to download the images");
+    }
+
     let mut server = TftpServerBuilder::new()
         .addr_opt(socket_addr)
         .serve_dir_opt(dir)

